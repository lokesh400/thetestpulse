<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Test</title>
    <style>
        body, h2, form {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Body styles */
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f9f9f9;
            color: #333;
            line-height: 1.6;
        }

        /* Container for the form */
        #main-container {
            max-width: 900px;
            margin: 50px auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        /* Title */
        h2 {
            text-align: center;
            font-size: 28px;
            color: #007BFF;
            margin-bottom: 20px;
        }

        /* Form label styles */
        label {
            font-size: 16px;
            display: block;
            color: #555;
        }

        /* Dropdown select styles */
        select {
            width: 100%;
            padding: 12px;
            margin: 8px 0 20px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 16px;
            background-color: #fafafa;
            transition: border-color 0.3s ease;
        }

        select:focus {
            border-color: #007BFF;
            outline: none;
            background-color: #fff;
        }

        /* Button styles */
        button {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            background-color: #007BFF;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #0056b3;
        }

        /* Question Block Styles */
        .question-block {
            background-color: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .question-block img {
            width: 20vw;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .question-block label {
            display: block;
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .question-block input {
            width: fit-content;
            padding: 12px;
            margin-bottom: 20px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 16px;
            background-color: #fafafa;
        }

        .question-block input:readonly {
            background-color: #f0f0f0;
        }

        #ques-blk-div{
            display: flex;
            gap: 40px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            #main-container {
                width: 90%;
                padding: 20px;
            }

            h2 {
                font-size: 24px;
            }

            select, button {
                font-size: 14px;
                padding: 10px;
            }
        }
    </style>
</head>
<body>

    <div id="main-container">
        <h2>Update Questions</h2>

            <div id="subject-selection">
                <label for="subject">Subject:</label>
                <select id="subject" name="subject" onchange="fetchChapters()" required>
                    <option value="">Select Subject</option>
                </select>

                <label for="chapter">Chapter:</label>
                <select id="chapter" name="chapter" onchange="fetchTopics()" required>
                    <option value="">Select Chapter</option>
                </select>

                <label for="topic">Topic:</label>
                <select id="topic" name="topic" onchange="fetchQuestions()" required>
                    <option value="">Select Topic</option>
                </select>
            </div>

            <div id="questions-container">
                <!-- Image-based questions will be loaded here -->
            </div>

            <button type="button" id="addQuestionsBtn" style="display: none;"></button>
        </form>


    </div>

    <script>
        let selectedQuestions = {}; // Store selected questions globally across topics/chapters

        // Fetch subjects from the API and populate the dropdown
        async function fetchSubjects() {
            let response = await fetch('/test/api/subjects');
            let data = await response.json();
            const subjectDropdown = document.getElementById('subject');
            subjectDropdown.innerHTML = '<option value="">Select Subject</option>';
            data.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject.Name;
                option.textContent = subject.Name;
                subjectDropdown.appendChild(option);
            });
        }

        // Fetch chapters for the selected subject
        async function fetchChapters() {
            const subjectName = document.getElementById('subject').value;
            let response = await fetch(`/test/api/chapters/${subjectName}`);
            let data = await response.json();
            const chapterDropdown = document.getElementById('chapter');
            chapterDropdown.innerHTML = '<option value="">Select Chapter</option>';
            data.forEach(chapter => {
                const option = document.createElement('option');
                option.value = chapter.ChapterName;
                option.textContent = chapter.ChapterName;
                chapterDropdown.appendChild(option);
            });
        }

        // Fetch topics for the selected chapter
        async function fetchTopics() {
            const chapterName = document.getElementById('chapter').value;
            let response = await fetch(`/test/api/topics/${chapterName}`);
            let data = await response.json();
            const topicDropdown = document.getElementById('topic');
            topicDropdown.innerHTML = '<option value="">Select Topic</option>';
            data.forEach(topic => {
                const option = document.createElement('option');
                option.value = topic.TopicName;
                option.textContent = topic.TopicName;
                topicDropdown.appendChild(option);
            });
        }

        // Fetch questions for the selected topic (image-based questions)
        async function fetchQuestions() {
            const topic = document.getElementById('topic').value;

            let response = await fetch(`/test/api/questions/${topic}`);
            let data = await response.json();
            const container = document.getElementById('questions-container');
            container.innerHTML = ''; // Clear previous questions

            data.forEach((question) => {
                const questionBlock = document.createElement('div');
                questionBlock.className = 'question-block';
                questionBlock.innerHTML = `
                    <div id="ques-blk-div">
                    <div>
                    <img src="${question.Question}" alt="Question Image">
                    <label>
                        Correct Option:
                        <input type="input" name="questionIds" value="${question.CorrectOption+1}" readonly>
                    </label>
                    </div>
                    <form action="/admin/questionbank/update/${question._id}" method="POST">
                          <label for="name">Updated Answer</label>
                          <input id="name" name="correctOption" required><br><br>
                          <button type="submit">Submit</button>
                    </form>
                    </div>
                `;
                container.appendChild(questionBlock);
            });

            document.getElementById('addQuestionsBtn').style.display = 'block';
            document.getElementById('selected-questions').style.display = 'block';
        }

        // Store selected questions in hidden inputs when "Add Questions" button is clicked
        document.getElementById('addQuestionsBtn').addEventListener('click', () => {
            const hiddenQuestionsContainer = document.getElementById('selected-questions');
            hiddenQuestionsContainer.innerHTML = '<h3>Selected Questions</h3>'; // Reset

            Object.keys(selectedQuestions).forEach((questionId, index) => {
                const questionDiv = document.createElement('div');
                questionDiv.classList.add('selected-question');
                questionDiv.innerHTML = `Question ${index + 1}: ${questionId}`;
                hiddenQuestionsContainer.appendChild(questionDiv);
            });
        });

        // Fetch the subjects on page load
        fetchSubjects();
    </script>

</body>
</html>
