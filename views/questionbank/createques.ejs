<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Create Question</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .drop-area.drag-over {
        background-color: #e0f2fe !important;
        border-color: #38bdf8 !important;
      }
    </style>
  </head>
  <body class="bg-gray-100 font-sans min-h-screen flex flex-col items-center justify-center">

    <!-- Flash Messages -->
    <div id="successMessage" class="flash-message hidden fixed bg-green-500 text-white px-6 py-3 rounded shadow-lg z-50"></div>
    <div id="errorMessage" class="flash-message hidden fixed bg-red-500 text-white px-6 py-3 rounded shadow-lg z-50"></div>

    <main class="flex w-full">
      <!-- Sidebar -->
      <%- include('../components/admin-sidebar.ejs') %>

      <!-- Main Content -->
      <div class="flex-1 px-6 py-10" style="margin-left: 250px;">
        <!-- <div class="flex justify-between items-center mb-6">
          <a href="/create/information" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition">Create Chapter</a>
        </div> -->

        <form action="/create-ques" method="POST" id="testForm" enctype="multipart/form-data" class="bg-white p-8 rounded-lg shadow-md max-w-2xl mx-auto w-full">
          <h2 class="text-2xl font-bold text-center mb-6 text-gray-700">Create New Question</h2>

          <div class="mb-4">
            <label for="subject" class="block font-semibold text-gray-700 mb-2">Subject</label>
            <select id="subject" name="SubjectName" onchange="fetchChapters()" required class="w-full border border-gray-300 p-2 rounded">
              <option value="">Select Subject</option>
            </select>
          </div>

          <div class="mb-4">
            <label for="chapter" class="block font-semibold text-gray-700 mb-2">Chapter</label>
            <select id="chapter" name="ChapterName" onchange="fetchTopics()" required class="w-full border border-gray-300 p-2 rounded">
              <option value="">Select Chapter</option>
            </select>
          </div>

          <div class="mb-4">
            <label for="topic" class="block font-semibold text-gray-700 mb-2">Topic</label>
            <select id="topic" name="TopicName" required class="w-full border border-gray-300 p-2 rounded">
              <option value="">Select Topic</option>
            </select>
          </div>

          <div class="mb-4">
            <label for="questionType" class="block font-semibold text-gray-700 mb-2">Type</label>
            <select name="questionType" required class="w-full border border-gray-300 p-2 rounded">
              <option value="mcq">MCQ</option>
              <option value="numerical">Numerical</option>
            </select>
          </div>

          <!-- Dropzone -->
          <div id="drop-area" class="drop-area border-2 border-dashed border-gray-300 p-6 rounded text-center text-gray-500 cursor-pointer mb-4">
            <span>Drag & Drop your image here, or click to select</span>
            <input type="file" name="file" id="file-input" class="hidden" required />
            <div class="file-name mt-2 text-gray-600 text-sm font-medium" id="file-name"></div>
          </div>

          <div class="mb-4">
            <label for="correct" class="block font-semibold text-gray-700 mb-2">Right Option</label>
            <input type="number" name="CorrectOption" required class="w-full border border-gray-300 p-2 rounded" />
          </div>

          <button type="submit" class="bg-blue-600 text-white px-6 py-3 rounded w-full hover:bg-blue-700 transition">Create Question</button>
        </form>
      </div>
    </main>

    <script>
      async function fetchSubjects() {
        const response = await fetch('/api/subjects');
        const data = await response.json();
        const subject = document.getElementById("subject");
        subject.innerHTML = '<option value="">Select Subject</option>';
        data.forEach(sub => {
          const option = document.createElement('option');
          option.value = sub.Name;
          option.textContent = sub.Name;
          subject.appendChild(option);
        });
      }

      async function fetchChapters() {
        const subjectName = document.getElementById('subject').value;
        const response = await fetch(`/api/chapters/${subjectName}`);
        const data = await response.json();
        const chapter = document.getElementById("chapter");
        chapter.innerHTML = '<option value="">Select Chapter</option>';
        data.forEach(ch => {
          const option = document.createElement('option');
          option.value = ch.ChapterName;
          option.textContent = ch.ChapterName;
          chapter.appendChild(option);
        });
      }

      async function fetchTopics() {
        const chapterName = document.getElementById('chapter').value;
        const response = await fetch(`/api/topics/${chapterName}`);
        const data = await response.json();
        const topic = document.getElementById("topic");
        topic.innerHTML = '<option value="">Select Topic</option>';
        data.forEach(tp => {
          const option = document.createElement('option');
          option.value = tp.TopicName;
          option.textContent = tp.TopicName;
          topic.appendChild(option);
        });
      }

      fetchSubjects();

      document.getElementById("testForm").addEventListener("submit", async function (event) {
        event.preventDefault();
        const formData = new FormData(this);
        try {
          const response = await fetch('/create-ques', { method: 'POST', body: formData });
          const result = await response.json();
          const successDiv = document.getElementById("successMessage");
          const errorDiv = document.getElementById("errorMessage");

          if (response.ok) {
            successDiv.innerText = result.message;
            successDiv.classList.remove("hidden");
            setTimeout(() => successDiv.classList.add("hidden"), 2000);
          } else {
            errorDiv.innerText = result.message;
            errorDiv.classList.remove("hidden");
            setTimeout(() => errorDiv.classList.add("hidden"), 2000);
          }
        } catch (error) {
          console.error("Error submitting form:", error);
          const errorDiv = document.getElementById("errorMessage");
          errorDiv.innerText = 'An error occurred. Please try again later.';
          errorDiv.classList.remove("hidden");
          setTimeout(() => errorDiv.classList.add("hidden"), 2000);
        }
      });

      const dropArea = document.getElementById('drop-area');
      const fileInput = document.getElementById('file-input');
      const fileNameDisplay = document.getElementById('file-name');

      dropArea.addEventListener('click', () => fileInput.click());
      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.classList.add('drag-over');
      });
      dropArea.addEventListener('dragleave', () => dropArea.classList.remove('drag-over'));
      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.classList.remove('drag-over');
        const files = e.dataTransfer.files;
        fileInput.files = files;
        displayFileName(files[0]);
      });
      fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
          displayFileName(fileInput.files[0]);
        }
      });

      function displayFileName(file) {
        if (file) fileNameDisplay.textContent = `Selected file: ${file.name}`;
      }
    </script>
  </body>
</html>
